@{
    ViewData["Title"] = "Just Messenger";
}

<style>
    body {
        font-family: Arial, sans-serif;
        padding: 1rem;
    }

    #messages {
        border: 1px solid #ccc;
        height: 250px;
        overflow-y: auto;
        margin-bottom: 1rem;
        padding: 0.5rem;
        background: #fafbfc;
    }

    .hidden {
        display: none;
    }

    label {
        display: block;
        margin-top: 0.5rem;
    }

    #messages .message-container {
        display: flex;
        flex-direction: column;
        margin-bottom: 0.25rem;
    }

    #messages .you {
        text-align: end;
        color: #0a84ff;
    }

    #messages .them {
        color: #444;
    }

    #messages .timestamp {
        font-size: 0.75em;
        color: #888;
    }
</style>

<h1>@ViewData["Title"]</h1>

<!-- Login Pane -->
<div id="loginPane">
    <label>
        Your User ID:
        <input id="userIdInput" placeholder="1, 2 or 3" autocomplete="username" />
    </label>
    <label>
        Recipient ID:
        <input id="recipientIdInput" placeholder="1, 2 or 3" autocomplete="off" />
    </label>
    <button id="connectBtn">Connect</button>
</div>

<!-- Chat Pane -->
<div id="chatPane" class="hidden">
    <div id="messages"></div>
    <input id="msgInput" placeholder="Type a message…" autocomplete="off" />
    <button id="sendBtn">Send</button>
</div>

<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@latest/dist/browser/signalr.min.js"></script>
<script>
    const API_BASE = "https://localhost:7136";
    let connection, userId, recipientId;

    document.getElementById("connectBtn").addEventListener("click", connect);
    document.getElementById("sendBtn").addEventListener("click", sendMessage);
    document.getElementById("msgInput").addEventListener("keydown", function (e) {
        if (e.key === "Enter") sendMessage();
    });

    async function connect() {
        userId = document.getElementById("userIdInput").value.trim();
        recipientId = document.getElementById("recipientIdInput").value.trim();
        if (!userId || !recipientId) {
            alert("Both User ID and Recipient ID are required");
            return;
        }
        setupConnection();
        try {
            await connection.start();
            await loadHistory();
            togglePanes();
        } catch (err) {
            console.error(err);
            alert("Connection failed");
        }
    }

    function setupConnection() {
        connection = new signalR.HubConnectionBuilder()
            .withUrl(`${API_BASE}/messagesHub?userId=${encodeURIComponent(userId)}`)
            .withAutomaticReconnect()
            .build();
        connection.on("ReceiveMessage", displayReceivedMessage);
    }

    async function loadHistory() {
        try {
            const url = `${API_BASE}/api/message/history?userId=${userId}&otherUserId=${recipientId}`;
            const res = await fetch(url);
            const history = await res.json();
            clearMessages();
            history.forEach(msg => {
                const isMine = msg.senderId === userId;
                const msgDiv = createMessageDiv(msg.text, isMine, isMine ? "You" : msg.senderId);
                const tsDiv = createTimestampDiv(msg.sentAt);
                appendMessageWithTimestamp(msgDiv, tsDiv, isMine);
            });
            scrollToBottom();
        } catch (err) {
            console.error("Failed to load history:", err);
        }
    }

    async function sendMessage() {
        const text = document.getElementById("msgInput").value.trim();
        if (!text) return;
        const message = { senderId: userId, recipientId, text };
        try {
            await fetch(`${API_BASE}/api/message/send`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(message)
            });
            displaySentMessage(text);
        } catch (err) {
            console.error("Send failed", err);
        }
    }

    function displaySentMessage(text) {
        const div = createMessageDiv(text, true);
        const ts = createTimestampDiv(new Date().toISOString());
        appendMessageWithTimestamp(div, ts, true);
        scrollToBottom();
        document.getElementById("msgInput").value = "";
    }

    function displayReceivedMessage(msg) {
        if (msg.senderId === userId) return; // already shown
        const div = createMessageDiv(msg.text, false, msg.senderId);
        const ts = createTimestampDiv(msg.sentAt);
        appendMessageWithTimestamp(div, ts, false);
        scrollToBottom();
    }

    function createMessageDiv(text, isMine, sender = "You") {
        const div = document.createElement("div");
        div.className = isMine ? "you" : "them";
        div.textContent = `${isMine ? "You" : sender}: ${text}`;
        return div;
    }

    function createTimestampDiv(isoString) {
        const time = new Date(isoString).toLocaleString();
        const div = document.createElement("div");
        div.className = "timestamp";
        div.textContent = time;
        return div;
    }

    function appendMessageWithTimestamp(messageDiv, timestampDiv, isMine) {
        const wrapper = document.createElement("div");
        wrapper.className = `message-container ${isMine ? "you" : "them"}`;
        wrapper.appendChild(messageDiv);
        wrapper.appendChild(timestampDiv);
        document.getElementById("messages").appendChild(wrapper);
    }

    function clearMessages() {
        document.getElementById("messages").innerHTML = "";
    }

    function scrollToBottom() {
        const container = document.getElementById("messages");
        container.scrollTop = container.scrollHeight;
    }

    function togglePanes() {
        document.getElementById("loginPane").classList.add("hidden");
        document.getElementById("chatPane").classList.remove("hidden");
    }
</script>