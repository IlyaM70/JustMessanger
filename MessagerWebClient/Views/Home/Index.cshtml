<style>
    body { font-family: Arial; padding: 1rem; }
    #messages { border: 1px solid #ccc; height: 200px; overflow-y: auto; margin-bottom: 1rem; padding: 0.5rem; }
    .hidden { display: none; }
    label { display: block; margin-top: 0.5rem; }

    #messages div.you
    {
    text-align: right;
    color: #0a84ff;
    }

    #messages div.them
    {
    text-align: left;
    color: #444;
    }
</style> 

<h1>Just Messenger</h1>

<!-- Step 1: Gather User & Recipient IDs -->
<div id="loginPane">
    <label>
        Your User ID: 
        <input id="userIdInput" placeholder="e.g. 1, 2 or 3" />
    </label>
    <label>
        Recipient ID: 
        <input id="recipientIdInput" placeholder="e.g. 1, 2 or 3" />
    </label>
    <button id="connectBtn">Connect</button>
</div>

<!-- Step 2: Chat UI (hidden until connected) -->
<div id="chatPane" class="hidden">
    <div id="messages"></div>
    <input id="msgInput" placeholder="Type a message…" />
    <button id="sendBtn">Send</button>
</div>

<script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@@latest/dist/browser/signalr.min.js"></script>
<script>
const API_BASE = "https://localhost:7136";
let connection, userId, recipientId;

document.getElementById("connectBtn").addEventListener("click", async () => {
    // Read and validate IDs
    userId = document.getElementById("userIdInput").value.trim();
    recipientId = document.getElementById("recipientIdInput").value.trim();
    if (!userId || !recipientId) {
    alert("Both User ID and Recipient ID are required");
    return;
    }

    // Build and start the SignalR connection
    connection = new signalR.HubConnectionBuilder()
    .withUrl(`${API_BASE}/messagesHub?userId=${encodeURIComponent(userId)}`)
    .withAutomaticReconnect()
    .build();

    // Handle incoming messages
    connection.on("ReceiveMessage", msg => {
    const div = document.createElement("div");
    div.textContent = `${msg.senderId}: ${msg.text}`;
    document.getElementById("messages").appendChild(div);
    document.getElementById("messages").scrollTop = 
        document.getElementById("messages").scrollHeight;
    });

    try {
    await connection.start();
    console.log("Connected as user", userId);
    } catch (err) {
    console.error(err);
    alert("Connection failed");
    return;
    }

    // Show chat UI
    document.getElementById("loginPane").classList.add("hidden");
    document.getElementById("chatPane").classList.remove("hidden");
});

// Send a message
document.getElementById("sendBtn").addEventListener("click", async () => {
    const text = document.getElementById("msgInput").value.trim();
    if (!text) return;

    const message = {
    senderId: userId,
    recipientId,
    text
    };

    try {
    await fetch(`${API_BASE}/api/message/send`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(message)
    });

    // Show sent message immediately
    const div = document.createElement("div");
    div.textContent = `You: ${message.text}`;
    div.style.textAlign = "right";
    document.getElementById("messages").appendChild(div);
    document.getElementById("messages").scrollTop = 
        document.getElementById("messages").scrollHeight;

    document.getElementById("msgInput").value = "";
    } catch (err) {
    console.error("Send failed", err);
    }
});

// For sent
const div = document.createElement("div");
div.className = "you";
div.textContent = `You: ${message.text}`;
document.getElementById("messages").appendChild(div);

// For received
connection.on("ReceiveMessage", msg => {
  if (msg.senderId === userId) return; // avoid duplicate if echoed

  const div = document.createElement("div");
  div.className = "them";
  div.textContent = `${msg.senderId}: ${msg.text}`;
  document.getElementById("messages").appendChild(div);
});
</script>